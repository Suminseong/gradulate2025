import pdfplumber
import pandas as pd

def parse_pdf_to_data(pdf_path):
    """PDF에서 데이터를 직접 파싱"""
    data = []
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            lines = page.extract_text().split("\n")
            sentence_num, passage, key_phrases, translation = None, None, [], None
            questions, korean_questions = [], []
            current_mode = None
            current_question_set = None

            for line in lines:
                line = line.strip()

                # 문장 번호
                if line.startswith("문장"):
                    if sentence_num:  # 기존 데이터를 저장
                        data.append(
                            organize_data(sentence_num, passage, key_phrases, translation, questions, korean_questions)
                        )
                        key_phrases, questions, korean_questions = [], [], []  # 초기화
                    sentence_num = line
                    passage = None
                    current_mode = None

                # 주요 단어 및 구
                elif line.startswith("주요 단어 및 구:"):
                    current_mode = "key_phrases"

                elif "key_phrases" in locals() and current_mode == "key_phrases" and "-" in line:
                    english, korean = map(str.strip, line.split("-", 1))
                    key_phrases.append((english, korean))

                # 번역
                elif line.startswith("chatGPT 번역"):
                    current_mode = "translation"
                    translation = line.replace("chatGPT 번역", "").strip()
                    
                 # 번역 내용 추가
                elif current_mode == "translation" and line:
                    if translation:
                        translation += f" {line}"
                    else:
                        translation = line

                # 지문
                elif not passage and not line.startswith(("1.", "답:")):
                    passage = line

                # 문제 처리 (1., 2., 3. 형식)
                elif line.startswith(("1.", "2.", "3.")):
                    question_text = line.split(".", 1)[1].strip()  # "1. 문제 텍스트"에서 "문제 텍스트"만 추출
                    current_question_set = questions
                    current_question_set.append([question_text, [], None])

                # 선택지 처리 (a), b), ...)
                elif line.startswith(("a)", "b)", "c)", "d)", "e)")):
                    if current_question_set:
                        current_question_set[-1][1].append(line[2:].strip())

                # 답 처리 (답: ...)
                elif line.startswith("답:"):
                    answer = line.split("답:", 1)[1].strip()
                    if current_question_set:
                        current_question_set[-1][2] = answer

            # 마지막 데이터를 저장
            if sentence_num:
                data.append(
                    organize_data(sentence_num, passage, key_phrases, translation, questions, korean_questions)
                )
    return data

def organize_data(sentence_num, passage, key_phrases, translation, questions, korean_questions):
    # 기본 데이터 구성
    row = [sentence_num, passage]

    # 주요 단어 및 구 (최대 10개 처리)
    for english, korean in key_phrases:
        row.append(english)
        row.append(korean)

    # 부족한 주요 단어 및 구를 공백으로 채우기
    for _ in range(10 - len(key_phrases)):
        row.append("")  # 영어 단어
        row.append("")  # 한글 뜻

    # 번역 추가
    row.append(translation)

    # 문제 및 보기 처리 (영어 문제 3개와 한글 문제 3개, 각 보기 5개)
    for question_set in [questions, korean_questions]:
        for question_text, options, answer in question_set:
            row.append(question_text)
            row.extend(options)  # 보기 추가
            row.extend([""] * (5 - len(options)))  # 부족한 보기 채우기
            row.append(answer)

        # 부족한 문제, 보기, 답 추가 (3문제 기준)
        for _ in range(3 - len(question_set)):
            row.append("")  # 문제
            row.extend([""] * 5)  # 보기
            row.append("")  # 답

    return row

def save_to_excel(data, output_path):
    columns = [
        "번호", "영어 본문",
        "주요 단어1 영어", "주요 단어1 한글", "주요 단어2 영어", "주요 단어2 한글", "주요 단어3 영어", "주요 단어3 한글",
        "주요 단어4 영어", "주요 단어4 한글", "주요 단어5 영어", "주요 단어5 한글", "주요 단어6 영어", "주요 단어6 한글",
        "주요 단어7 영어", "주요 단어7 한글", "주요 단어8 영어", "주요 단어8 한글", "주요 단어9 영어", "주요 단어9 한글",
        "주요 단어10 영어", "주요 단어10 한글",
        "번역",
        "영어 문제1", "영어 문제1 선택a", "영어 문제1 선택b"," 영어 문제1 선택c", "영어 문제1 선택d", "영어 문제1 선택e", "영어 문제1 답",
        "영어 문제2", "영어 문제2 선택a", "영어 문제2 선택b"," 영어 문제2 선택c", "영어 문제2 선택d", "영어 문제2 선택e", "영어 문제2 답",
        "영어 문제3", "영어 문제3 선택a", "영어 문제3 선택b"," 영어 문제3 선택c", "영어 문제3 선택d", "영어 문제3 선택e", "영어 문제3 답",
        "한글 문제1", "한글 문제1 선택a", "한글 문제1 선택b"," 한글 문제1 선택c", "한글 문제1 선택d", "한글 문제1 선택e", "한글 문제1 답",
        "한글 문제2", "한글 문제2 선택a", "한글 문제2 선택b"," 한글 문제2 선택c", "한글 문제2 선택d", "한글 문제2 선택e", "한글 문제2 답",
        "한글 문제3", "한글 문제3 선택a", "한글 문제3 선택b"," 한글 문제3 선택c", "한글 문제3 선택d", "한글 문제3 선택e", "한글 문제3 답",
    ]
    df = pd.DataFrame(data, columns=columns)
    df.to_excel(output_path, index=False)
    print(f"엑셀 파일이 저장되었습니다: {output_path}")

# 실행 코드
pdf_path = "문장1_2_3_엑셀변환용샘플.pdf"
output_excel = "output_questions.xlsx"

data = parse_pdf_to_data(pdf_path)
save_to_excel(data, output_excel)
