# 문제
# 지문
# 주요단어
# chatGPT 번역
# 줄
# 지문
# 1.문제
# 보기 5개('소문자 알파벳 + )'로 구성)
# 답:
# 2.문제
# 보기 5개('소문자 알파벳 + )'로 구성)
# 답:
# 3.문제
# 보기 5개('소문자 알파벳 + )'로 구성)
# 답:


import pdfplumber
import pandas as pd

def extract_data_from_pdf(pdf_path):
    data = []  # 데이터를 저장할 리스트

    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text = page.extract_text()
            if not text:
                continue

            lines = text.split('\n')
            sentence_num, passage, key_phrases, translation = None, None, [], None
            questions = []
            key_mode = False

            for line in lines:
                line = line.strip()

                # 문장 번호 및 지문
                if line.startswith("문장"):
                    if sentence_num: 
                        data.append(organize_data(sentence_num, passage, key_phrases, translation, questions))
                        key_phrases, questions = [], []
                    sentence_num = line
                    passage = None  

                elif "주요 단어 및 구:" in line:
                    key_mode = True 

                elif key_mode and "-" in line:  # 주요 단어 및 구 처리
                    english, korean = map(str.strip, line.split("-", 1))
                    key_phrases.append((english, korean))

                elif "chatGPT 번역" in line:
                    key_mode = False  
                    translation = line.replace("chatGPT 번역", "").strip()

                # 지문 내용
                elif not passage and not line.startswith(("1.", "답:")):
                    passage = line

                # 문제 시작
                elif line.startswith(("1.", "2.", "3.")):
                    question_text = line[2:].strip()
                    options = []

                # 보기 처리
                elif line.startswith(("a)", "b)", "c)", "d)", "e)")):
                    options.append(line[2:].strip())

                # 답 처리
                elif line.startswith("답:"):
                    answer = line.split("답:", 1)[1].strip()
                    questions.append((question_text, options, answer))

            # 마지막 문장 처리
            if sentence_num:
                data.append(organize_data(sentence_num, passage, key_phrases, translation, questions))

    return data

def organize_data(sentence_num, passage, key_phrases, translation, questions):
    # 기본 데이터 구성
    row = [sentence_num, passage]

    # 주요 단어 및 구 (C열, D열)
    for english, korean in key_phrases:
        row.append(english)
        row.append(korean)

    # 빈 주요 단어와 뜻 추가 (최대 5개 기준)
    for _ in range(5 - len(key_phrases)):
        row.append(None)  # 영어 단어
        row.append(None)  # 한글 뜻

    # 번역 추가
    row.append(translation)

    # 문제 및 보기 처리 (최대 3문제, 각 문제는 보기 5개와 답)
    for question_text, options, answer in questions:
        row.append(question_text)
        row.extend(options)  # 보기 추가
        row.extend([None] * (5 - len(options)))  # 누락된 보기 채우기
        row.append(answer)

    # 빈 문제, 보기, 답 추가 (3문제 기준)
    for _ in range(3 - len(questions)):
        row.append(None)  # 문제
        row.extend([None] * 5)  # 보기
        row.append(None)  # 답

    return row

def save_to_excel(data, output_path):
    columns = [
        "문장 번호", "지문",
        "영어 단어1", "한글 뜻1", "영어 단어2", "한글 뜻2", "영어 단어3", "한글 뜻3",
        "영어 단어4", "한글 뜻4", "영어 단어5", "한글 뜻5",
        "번역",
        "1번 문제", "1번 보기 a", "1번 보기 b", "1번 보기 c", "1번 보기 d", "1번 보기 e", "1번 답",
        "2번 문제", "2번 보기 a", "2번 보기 b", "2번 보기 c", "2번 보기 d", "2번 보기 e", "2번 답",
        "3번 문제", "3번 보기 a", "3번 보기 b", "3번 보기 c", "3번 보기 d", "3번 보기 e", "3번 답"
    ]
    df = pd.DataFrame(data, columns=columns)
    df.to_excel(output_path, index=False)
    print(f"엑셀 파일이 저장되었습니다: {output_path}")

pdf_path = "문장1_2_3_엑셀변환용샘플.pdf"
output_excel = "output_questions.xlsx"

data = extract_data_from_pdf(pdf_path)
save_to_excel(data, output_excel)
